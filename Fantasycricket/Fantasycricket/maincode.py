# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fantasycricket.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from calculate_points import player_points
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from open_team import Ui_Dialog as Open   # importing open window dialogbox
from new_team import Ui_new_team as New     # importing new window dialogbox
from evalscore import Ui_evaluate_team as Eva  # importing evaluate window dialogbox

import sqlite3
fant=sqlite3.connect('fantasy_cricket.db')  # connecting to database file(fandatabase.db)
fantcurs=fant.cursor()


class Ui_MainWindow(object):
    def __init__(self):
        self.newDialog = QtWidgets.QMainWindow()
        self.new_screen = New()
        self.new_screen.setupUi(self.newDialog)

        self.EvaluateWindow = QtWidgets.QMainWindow()
        self.eval_screen = Eva()
        self.eval_screen.setupUi(self.EvaluateWindow)

        self.openDialog = QtWidgets.QMainWindow()
        self.open_screen = Open()
        self.open_screen.setupUi(self.openDialog)

      # FILE OPENING MENU
    def file_open(self):
        self.open_screen.setupUi(self.openDialog)
        self.openDialog.show()
        self.open_screen.openname.clicked.connect(self.openteam)

    # EVALUATE TEAM MENU
    def file_evaluate(self):
        self.eval_screen.setupUi(self.EvaluateWindow)
        self.EvaluateWindow.show()

    def setupUi(self, MainWindow):

        # INITIALISING POINTS AND COUNTS
        self.avail_points = 1000
        self.used_points = 0
        self.totalcount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.alrdscount = 0
        self.wicketerscount = 0
        # INITIALIZING LISTS
        self.a = []  # bowler names list
        self.b = []  #  batsman nameslist
        self.c = []   # allrounder names list
        self.d = []  #wicketer names list
        self.list1 = []    # selectedplayer's list
    
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(769, 703)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(40, 140, 691, 71))
        self.frame.setAutoFillBackground(False)
        self.frame.setStyleSheet("background-color: rgb(197, 255, 255);\n""border-color: rgb(25, 252, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(0)
        self.frame.setMidLineWidth(1)
        self.frame.setObjectName("frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.WK = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.WK.setFont(font)
        self.WK.setStyleSheet("color: rgb(0, 129, 143);")
        self.WK.setObjectName("WK")
        self.gridLayout_3.addWidget(self.WK, 1, 7, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Algerian")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 1, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Algerian")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_3.addWidget(self.label_4, 1, 2, 1, 1)
        self.BAT = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.BAT.setFont(font)
        self.BAT.setStyleSheet("color: rgb(0, 129, 143);")
        self.BAT.setObjectName("BAT")
        self.gridLayout_3.addWidget(self.BAT, 1, 1, 1, 1)
        self.AR = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.AR.setFont(font)
        self.AR.setStyleSheet("color: rgb(0, 129, 143);")
        self.AR.setObjectName("AR")
        self.gridLayout_3.addWidget(self.AR, 1, 5, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Algerian")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_3.addWidget(self.label_6, 1, 4, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Algerian")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout_3.addWidget(self.label_8, 1, 6, 1, 1)
        self.BOW = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.BOW.setFont(font)
        self.BOW.setStyleSheet("color: rgb(0, 129, 143);")
        self.BOW.setObjectName("BOW")
        self.gridLayout_3.addWidget(self.BOW, 1, 3, 1, 1)
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("color: rgb(42, 84, 127);\n"
"")
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 0, 0, 1, 2)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(40, 250, 691, 31))
        self.frame_2.setStyleSheet("selection-color: rgb(5, 255, 255);\n"
"background-color: rgb(245, 245, 245);\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setLineWidth(0)
        self.frame_2.setMidLineWidth(1)
        self.frame_2.setObjectName("frame_2")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(10, 10, 163, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.points_available = QtWidgets.QLabel(self.frame_2)
        self.points_available.setGeometry(QtCore.QRect(179, 10, 164, 16))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.points_available.setFont(font)
        self.points_available.setStyleSheet("color: rgb(0, 129, 143);")
        self.points_available.setObjectName("points_available")
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setGeometry(QtCore.QRect(349, 10, 163, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.points_used = QtWidgets.QLabel(self.frame_2)
        self.points_used.setGeometry(QtCore.QRect(518, 10, 163, 16))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.points_used.setFont(font)
        self.points_used.setStyleSheet("color: rgb(0, 129, 143);")
        self.points_used.setObjectName("points_used")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 300, 691, 341))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_5 = QtWidgets.QFrame(self.horizontalLayoutWidget)
        self.frame_5.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_4 = QtWidgets.QFrame(self.frame_5)
        self.frame_4.setGeometry(QtCore.QRect(20, 10, 301, 321))
        self.frame_4.setStyleSheet("background-color: rgb(0, 52, 52);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout.setObjectName("gridLayout")
        
        self.ar_rb = QtWidgets.QRadioButton(self.frame_4)#ar_rb
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ar_rb.setFont(font)
        self.ar_rb.setStyleSheet("color: rgb(0, 230, 255);")
        self.ar_rb.setEnabled(False)
        self.ar_rb.setObjectName("ar_rb")
        self.gridLayout.addWidget(self.ar_rb, 0, 3, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        
        self.wk_rb = QtWidgets.QRadioButton(self.frame_4)#wk_rb
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.wk_rb.setFont(font)
        self.wk_rb.setStyleSheet("color: rgb(0, 230, 255);")
        self.wk_rb.setEnabled(False)
        self.wk_rb.setObjectName("wk_rb")
        self.gridLayout.addWidget(self.wk_rb, 0, 4, 1, 1)
        
        self.players_avail = QtWidgets.QListWidget(self.frame_4)#available players
        self.players_avail.setEnabled(True)
        self.players_avail.setStyleSheet("border-color: rgb(1, 166, 255);\n"
"background-color: rgb(255, 255, 255);")
        self.players_avail.setObjectName("players_avail")
        self.gridLayout.addWidget(self.players_avail, 1, 1, 1, 5)
        
        self.bow_rb = QtWidgets.QRadioButton(self.frame_4)#bow_rb
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bow_rb.setFont(font)
        self.bow_rb.setStyleSheet("color: rgb(0, 230, 255);")
        self.bow_rb.setEnabled(False)
        self.bow_rb.setObjectName("bow_rb")
        self.gridLayout.addWidget(self.bow_rb, 0, 2, 1, 1)
        
        self.bat_rb = QtWidgets.QRadioButton(self.frame_4)#bat_rb
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bat_rb.setFont(font)
        self.bat_rb.setStyleSheet("color: rgb(0, 230, 255);")
        self.bat_rb.setEnabled(False)
        self.bat_rb.setTabletTracking(False)
        self.bat_rb.setAcceptDrops(False)
        self.bat_rb.setObjectName("bat_rb")
        self.gridLayout.addWidget(self.bat_rb, 0, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 6, 1, 1)
        self.frame_3 = QtWidgets.QFrame(self.frame_5)
        self.frame_3.setGeometry(QtCore.QRect(370, 10, 301, 321))
        self.frame_3.setStyleSheet("background-color: rgb(0, 52, 52);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.team_name = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Cooper Black")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.team_name.setFont(font)
        self.team_name.setStyleSheet("color: rgb(190, 252, 255);")
        self.team_name.setObjectName("team_name")
        self.gridLayout_2.addWidget(self.team_name, 0, 2, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(0, 230, 255);")
        self.label_14.setObjectName("label_14")
        self.gridLayout_2.addWidget(self.label_14, 0, 1, 1, 1)
        
        self.players_selected = QtWidgets.QListWidget(self.frame_3)#players selected
        self.players_selected.setStyleSheet("border-color: rgb(1, 166, 255);\n"
"background-color: rgb(255, 255, 255);")
        self.players_selected.setObjectName("players_selected")
        self.gridLayout_2.addWidget(self.players_selected, 1, 1, 1, 2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem2, 1, 3, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 1, 0, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.frame_5)
        self.label_15.setGeometry(QtCore.QRect(330, 140, 31, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("color: rgb(170, 255, 255);")
        self.label_15.setTextFormat(QtCore.Qt.PlainText)
        self.label_15.setIndent(0)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_5.addWidget(self.frame_5)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(70, 10, 641, 121))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("../../Documents/fantasy.cricket.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow) #menubar
        self.menubar.setGeometry(QtCore.QRect(0, 0, 769, 21))
        self.menubar.setObjectName("menubar")
        
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.menuManage_Teams.setFont(font)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.new_t = QtWidgets.QAction(MainWindow) #new team
        self.new_t.setIconText("NEW Team")
        self.new_t.setShortcut("Ctrl+N")
        self.new_t.setShortcutContext(QtCore.Qt.WindowShortcut)
        self.new_t.setVisible(True)
        self.new_t.setShortcutVisibleInContextMenu(True)
        self.new_t.setObjectName("new_t")
        
        
        
        self.open_t = QtWidgets.QAction(MainWindow) #open team
        self.open_t.setObjectName("open_t")
        
        self.save_t = QtWidgets.QAction(MainWindow) #save team
        self.save_t.setObjectName("save_t")
        
        self.evaluate_t = QtWidgets.QAction(MainWindow) #evaluate team
        self.evaluate_t.setObjectName("evaluate_t")
        
        self.actionQUIT = QtWidgets.QAction(MainWindow) #Quit
        self.actionQUIT.setObjectName("actionQUIT")
        self.actionQUIT.triggered.connect(self.quit)
        
        self.menuManage_Teams.addAction(self.new_t)
        self.menuManage_Teams.addAction(self.open_t)
        self.menuManage_Teams.addAction(self.save_t)
        self.menuManage_Teams.addAction(self.evaluate_t)
        self.menuManage_Teams.addAction(self.actionQUIT)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        #Action triggered
        self.new_t.triggered.connect(self.file_new)
        self.open_t.triggered.connect(self.file_open)
        self.save_t.triggered.connect(self.file_save)
        self.evaluate_t.triggered.connect(self.file_evaluate)
        self.actionQUIT.triggered.connect(self.quit)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # DOUBLE CLICK
        self.players_avail.itemDoubleClicked.connect(self.removelist1)
        self.players_selected.itemDoubleClicked.connect(self.removelist2)

        # -----stats of player
        self.stats = {}

        self.new_screen.savename.clicked.connect(self.namechange)

        # RADIOBUTTONS  CLICK
        self.bat_rb.clicked.connect(self.load_names)
        self.wk_rb.clicked.connect(self.load_names)
        self.bow_rb.clicked.connect(self.load_names)
        self.ar_rb.clicked.connect(self.load_names)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.WK.setText(_translate("MainWindow", "##"))
        self.label_2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.label_4.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.BAT.setText(_translate("MainWindow", "##"))
        self.AR.setText(_translate("MainWindow", "##"))
        self.label_6.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.label_8.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
        self.BOW.setText(_translate("MainWindow", "##"))
        self.label.setText(_translate("MainWindow", "Your Selections"))
        self.label_10.setText(_translate("MainWindow", "Points Available"))
        self.points_available.setText(_translate("MainWindow", "####"))
        self.label_12.setText(_translate("MainWindow", "Points Used"))
        self.points_used.setText(_translate("MainWindow", "####"))
        self.ar_rb.setText(_translate("MainWindow", "AR"))
        self.wk_rb.setText(_translate("MainWindow", "WK"))
        self.bow_rb.setText(_translate("MainWindow", "BOW"))
        self.bat_rb.setText(_translate("MainWindow", "BAT"))
        self.team_name.setText(_translate("MainWindow", "Displayed Here"))
        self.label_14.setText(_translate("MainWindow", "Team Name"))
        self.label_15.setText(_translate("MainWindow", ">"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.new_t.setText(_translate("MainWindow", "NEW Team"))
        self.new_t.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.open_t.setText(_translate("MainWindow", "OPEN Team"))
        self.open_t.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.save_t.setText(_translate("MainWindow", "SAVE Team"))
        self.save_t.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.evaluate_t.setText(_translate("MainWindow", "EVALUATE Team"))
        self.evaluate_t.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionQUIT.setText(_translate("MainWindow", "QUIT"))
          # NEW FILE MENU
    def file_new(self):
        self.newDialog.show()

    def namechange(self):
        teamname = self.new_screen.team_name.text()
        fantcurs.execute("SELECT DISTINCT name FROM teams")
        l = fantcurs.fetchall()
        for i in l:
            if i[0] == teamname:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("Team with same name already exists!!\nPlease choose another name")
                msg.setWindowTitle("Invalid Team Name")
                msg.exec_()
                return 0
        if len(teamname) == 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("You cannot leave the field blank!!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        elif teamname.isnumeric():
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Please enter a valid teamname\n(Name must contain atleast one character)!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        else:
            self.reset()
            self.tname = self.new_screen.team_name.text()
            self.team_name.setText(str('    '+self.tname))
            self.newDialog.close()

    #TO RESET ALL COUNTS AND LITS
    def reset(self):
        self.enablebuttons()
        self.load_names()
        self.used_points = 0
        self.alrdscount = 0
        self.wicketerscount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.totalcount = 0
        self.avail_points = 1000
        self.points_available.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))
        self.list1.clear()
        self.load_names()

        self.players_selected.clear()


        #SAVE TEAM MENU
    def file_save(self):
        if not self.error():  #IF THERE IS AN ERROR
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText(' Inufficient Players OR Points !!')
            msg.setWindowTitle("Fantasy Cricket")
            msg.exec_()
        elif self.error():  # IF NO ERROR
            try:
                fantcurs.execute("SELECT DISTINCT name FROM teams;")
                x = fantcurs.fetchall()
                for i in x:
                    if self.team_name.text() == i[0]:   # CHECKING IF THE TEAMNAME ALREADY EXISTS
                        print('Updating already there')
                        fantcurs.execute("DELETE  FROM teams WHERE name='" + self.team_name.text() + "';") #DELETING TO UPDATE TEAM
            except:
                print('error')
            for i in range(self.players_selected.count()):
                # print('----addding--')
                # print('teamnane: ',self.team_name.text())
                # print('playername: ',self.list1[i])
                # print('points: ', player_points[self.list1[i]])
                try:
                    fantcurs.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?)",
                                     (self.team_name.text(), self.list1[i], player_points[self.list1[i]]))

                    # self.file_evaluate()
                except:
                    print('error in operation!')
            fant.commit()
        else:
            print('---error in operation')


    # QUITING METHOD
    def quit(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText(' close')
        msg.setWindowTitle("Fantasy_Cricket")
        msg.exec_()
        # print('exit')
        sys.exit()

   #ON RADIOBUTTONS CLICKED
    def load_names(self):
        Batsman = 'BAT'
        WicketKeeper = 'WK'
        Allrounder = 'AR'
        Bowler = 'BWL'
        sql1 = "SELECT player,value from stats WHERE ctg = '" + Batsman + "';"
        sql2 = "SELECT Player,value from stats WHERE ctg = '" + WicketKeeper + "';"
        sql3 = "SELECT Player,value from stats WHERE ctg ='" + Allrounder + "';"
        sql4 = "SELECT Player,value from stats WHERE ctg = '" + Bowler + "';"

        fantcurs.execute(sql1)
        x = fantcurs.fetchall()
        fantcurs.execute(sql4)
        y = fantcurs.fetchall()
        fantcurs.execute(sql3)
        z = fantcurs.fetchall()
        fantcurs.execute(sql2)
        w = fantcurs.fetchall()

        batsmen = []
        bowlers = []
        allrounders = []
        wcktkeepers = []

        for k in x:
            batsmen.append(k[0])
            self.b.append(k[0])
            self.stats[k[0]] = k[1]
        for k in y:
            bowlers.append(k[0])
            self.stats[k[0]] = k[1]
            self.a.append(k[0])
        for k in w:
            wcktkeepers.append(k[0])
            self.stats[k[0]] = k[1]
            self.d.append(k[0])
        for k in z:
            allrounders.append(k[0])
            self.stats[k[0]] = k[1]
            self.c.append(k[0])
        for i in self.list1:
            if i in allrounders:
                allrounders.remove(i)
            elif i in batsmen:
                batsmen.remove(i)
            elif i in bowlers:
                bowlers.remove(i)
            elif i in wcktkeepers:
                wcktkeepers.remove(i)

        if self.bat_rb.isChecked() == True:
            self.players_avail.clear()
            for i in range(len(batsmen)):
                item = QtWidgets.QListWidgetItem(batsmen[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.players_avail.addItem(item)
        elif self.bow_rb.isChecked() == True:
            self.players_avail.clear()
            for i in range(len(bowlers)):
                item = QtWidgets.QListWidgetItem(bowlers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.players_avail.addItem(item)
        elif self.ar_rb.isChecked() == True:
            self.players_avail.clear()
            for i in range(len(allrounders)):
                item = QtWidgets.QListWidgetItem(allrounders[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.players_avail.addItem(item)

        elif self.wk_rb.isChecked() == True:
            self.players_avail.clear()
            for i in range(len(wcktkeepers)):
                item = QtWidgets.QListWidgetItem(wcktkeepers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.players_avail.addItem(item)

    def removelist1(self, item):   # REMOVE FROM AVAILABLE PLAYERS AND ADD TO SELECTED PLAYERS
        self.conditions_1(item.text())
        self.players_avail.takeItem(self.players_avail.row(item))
        self.players_selected.addItem(item.text())
        self.totalcount = self.players_selected.count()
        self.list1.append(item.text())
        self.error()

    def conditions_1(self, cat):   # Adding and Deducting respective points from points_calculator.py
        self.avail_points -= self.stats[cat]
        self.used_points += self.stats[cat]
        if cat in self.a:
            self.bowlerscount += 1
        elif cat in self.d:
            self.wicketerscount += 1
        elif cat in self.c:
            self.alrdscount += 1
        elif cat in self.b:
            self.batsmencount += 1

        self.points_available.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))

    def conditions_2(self, cat):   # Adding and Deducting respective poinrs from points_calculator.py
        self.avail_points += self.stats[cat]
        self.used_points -= self.stats[cat]
        if cat in self.a:
            self.bowlerscount -= 1
        elif cat in self.d:
            self.wicketerscount -= 1
        elif cat in self.c:
            self.alrdscount -= 1
        elif cat in self.b:
            self.batsmencount -= 1

        self.points_available.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))

    def removelist2(self, item):   # REMOVE FROM SELECTED PLAYERS AND ADD TO AVAIALBLE PLAYERS
        self.players_selected.takeItem(self.players_selected.row(item))
        self.players_avail.addItem(item.text())
        self.list1.remove(item.text())
        # self.error()
        self.totalcount = self.players_selected.count()
        self.conditions_2(item.text())

    def openteam(self):  #upon open team selected
        self.reset()
        teamname = self.open_screen.open_team.currentText()
        self.team_name.setText(teamname)
        self.enablebuttons()
        fantcurs.execute("SELECT players from teams WHERE name= '" + teamname + "';")
        x=fantcurs.fetchall()
        score=[]
        for i in x:
            fantcurs.execute("SELECT value from stats WHERE player='"+i[0]+"';")
            y=fantcurs.fetchone()
            score.append(y[0])
        # print(score)
        sum=0
        for i in score:
            sum+=i
        self.players_selected.clear()
        self.load_names()
        for i in x:
            self.players_selected.addItem(i[0])
            self.list1.append(i[0])
            self.conditions_1(i[0])
        self.used_points = sum
        self.avail_points = 1000 - sum
        self.points_available.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.openDialog.close()

    def enablebuttons(self):
        self.bat_rb.setEnabled(True)
        self.bow_rb.setEnabled(True)
        self.ar_rb.setEnabled(True)
        self.wk_rb.setEnabled(True)
        
    def disablebuttons(self):
        self.bat_rb.setEnabled(False)
        self.bow_rb.setEnabled(False)
        self.ar_rb.setEnabled(False)
        self.wk_rb.setEnabled(False)
        

    def error(self):
        msg = QMessageBox()
        if self.wicketerscount > 1:
            msg.setIcon(QMessageBox.Critical)
            # msg.setText("Error")
            msg.setInformativeText('Only 1 wicketkeeper is allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        elif self.totalcount > 11:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('No more than 11 players allowed!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
            return 0
        elif self.totalcount < 11 :
            return 0
        elif self.wicketerscount < 1:
            return 0
        elif self.avail_points <= -1:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Not enough points!')
            msg.setWindowTitle("Selection Cricket")
            msg.exec_()
            return 0

        return 1


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
